{"version":3,"sources":["firebase.tsx","components/interfaces/UserInterface.tsx","config.tsx","components/authentication/register.tsx","components/authentication/login.tsx","components/authentication/authentication.tsx","components/interfaces/RoomInterface.tsx","components/interfaces/answerInterface.tsx","components/interfaces/participantInterface.tsx","components/game/hostJoin.tsx","components/utilities/loadingText.tsx","components/utilities/controls.tsx","components/utilities/userCard.tsx","components/lounges/preGameLounge.tsx","components/game/question.tsx","components/lounges/postAnswerLounge.tsx","components/utilities/answerCard.tsx","components/lounges/answerPickLounge.tsx","components/lounges/postAnswerPickLounge.tsx","components/utilities/scoreCard.tsx","components/lounges/scoreboardLounge.tsx","components/lounges/postReadyLounge.tsx","components/game/finalResult.tsx","components/lounges/waitingLounge.tsx","components/game/mainGame.tsx","components/game/preGame.tsx","components/utilities/navbar.tsx","components/interfaces/questionInterface.tsx","components/utilities/addQuestion.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","dummyUser","firstName","lastName","uid","roomCode","updateUser","user","database","ref","set","getUser","userCode","once","codeToName","part","a","tempPart","i","length","then","s","val","push","config","appName","min_players","hotString","Register","state","value","error","email","password","confirmPassword","handleFirstNameChange","e","errorText","emptyFieldValidation","setState","target","handleLastNameChange","handleEmailChange","validateEmail","handlePasswordChange","handleConfirmPasswordChange","handleSubmitClick","event","preventDefault","auth","createUserWithEmailAndPassword","currentUser","tempUser","undefined","props","onRegistered","catch","code","test","String","toLowerCase","className","this","noValidate","placeholder","onChange","required","map","index","type","onClick","registerToLogin","Component","Login","handleLoginClick","signInWithEmailAndPassword","onLogin","message","loginToRegister","Authentication","visibilities","registerCompVisibility","hasAuthenticated","loginCompVisibility","dummyRoom","host","participants","waiting","totalRounds","currentRound","allAnswersSubmitted","allAnswersPicked","allReadyForNextRound","roundOver","questionBank","waitingForPlayers","updateRoom","room","console","trace","getRoom","dummyAnswer","answerText","submittedBy","selectedBy","dummyParticipant","score","currentAnswer","chosenAns","readyForNextRound","HostJoin","joinGame","hostGame","consonants","vowels","onHost","randomGenerator","snapshot","createRoom","onRoomCreate","onCodeChange","joinRoom","tempRoom","onRoomJoined","errors","letter1","Math","floor","random","letter3","letter2","letter4","letter6","LoadingText","children","Controls","participant","mounted","participantReady","newRound","newGame","on","disabled","startGame","deleteRoom","leaveRoom","UserCard","kick","filter","p","currUserCode","width","height","viewBox","fill","xmlns","fillRule","d","PreGameLounge","handleDecrement","changeTotalRounds","handleIncrement","some","hasOwnProperty","id","Question","loaded","answer","onAnswerChange","handleSubmit","tempAnswer","answers","questionText","includes","maxLength","PostAnswerLounge","AnswerCard","classes","handleClick","ans","sort","b","animatingIndex","onAnimationEnd","incrementAnimatingIndex","AnswerPickLounge","toString","PostAnswerPickLounge","ScoreCard","answerPickedBy","participantAnswer","l","punctuation","ScoreboardLounge","answerPickedOf","PostReadyLounge","FinalResult","winners","tempWinners","WaitingLounge","MainGame","randomSelector","slots","tempParticipants","ind","plugIn","text","replace","bank","tempArray","Object","keys","PreGame","roomJoined","x","remove","Navbar","onAuthStateChanged","data-toggle","data-target","aria-controls","aria-expanded","aria-label","role","aria-haspopup","aria-labelledby","toggleQuestionForm","onSignOut","dummyQuestion","AddQuestion","dollarCount","onQuestionChange","split","onSubmit","tempQuestion","App","loadingVisible","questionFormVisible","signOut","isAuthenticated","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67f3cd71.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport \"firebase/auth\";\nvar firebaseConfig = {\n  apiKey: \"AIzaSyA6oAe0rOcK123FpMB8VFwJZ7IYjYHa050\",\n  authDomain: \"project2-caa66.firebaseapp.com\",\n  databaseURL: \"https://project2-caa66.firebaseio.com\",\n  projectId: \"project2-caa66\",\n  storageBucket: \"project2-caa66.appspot.com\",\n  messagingSenderId: \"160603073424\",\n  appId: \"1:160603073424:web:0467ce5bcbe9eb9aa9a115\",\n  measurementId: \"G-8B370MRWDK\",\n};\nvar fire = firebase.initializeApp(firebaseConfig);\nexport default fire;\n","import fire from \"../../firebase\";\ninterface UserInterface {\n  firstName: string;\n  lastName: string;\n  uid: string;\n  roomCode: string;\n}\n\nexport default UserInterface;\nexport let dummyUser = (\n  firstName: string = \"dummy\",\n  lastName: string = \"dummy\",\n  uid: string = \"dummy\",\n  roomCode: string = \"dummy\"\n): UserInterface => ({ firstName, lastName, uid, roomCode });\nexport function updateUser(user: UserInterface): Promise<any> {\n  return fire\n    .database()\n    .ref(\"users/\" + user.uid)\n    .set(user);\n}\nexport function getUser(userCode: string): Promise<any> {\n  return fire\n    .database()\n    .ref(\"users/\" + userCode)\n    .once(\"value\");\n}\nexport let codeToName = async (part: Array<string>): Promise<string[]> => {\n  let tempPart: string[] = [];\n  for (let i = 0; i < part.length; i++) {\n    await getUser(part[i]).then((s) => {\n      if (s.val()) {\n        tempPart.push(s.val().firstName);\n      }\n    });\n  }\n  return tempPart;\n};\n","let config = {\n  appName: \"sham\",\n  min_players: 3,\n  hotString: \"$\",\n};\n\nexport default config;\n","import React, { Component } from \"react\";\nimport fire from \"../../firebase\";\nimport UserInterface, { updateUser } from \"../interfaces/UserInterface\";\nimport config from \"../../config\";\n\ninterface registerInterface {\n  onRegistered: Function;\n  registerToLogin: any;\n}\n\nclass Register extends Component<registerInterface> {\n  state = {\n    firstName: { value: \"\", error: [] },\n    lastName: { value: \"\", error: [] },\n    email: { value: \"\", error: [] },\n    password: { value: \"\", error: [] },\n    confirmPassword: { value: \"\", error: [] },\n  };\n\n  emptyFieldValidation(e: any) {\n    if (e.target.value === \"\") {\n      return \"This field can't be empty\";\n    }\n    return \"\";\n  }\n\n  validateEmail(email: any) {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  }\n\n  handleFirstNameChange = (e: any) => {\n    let errorText: string[] = [];\n    if (this.emptyFieldValidation(e))\n      errorText.push(this.emptyFieldValidation(e));\n    this.setState({ firstName: { value: e.target.value, error: errorText } });\n  };\n  handleLastNameChange = (e: any) => {\n    let errorText: string[] = [];\n    if (this.emptyFieldValidation(e))\n      errorText.push(this.emptyFieldValidation(e));\n    this.setState({ lastName: { value: e.target.value, error: errorText } });\n  };\n  handleEmailChange = (e: any) => {\n    let errorText: string[] = [];\n    if (this.emptyFieldValidation(e))\n      errorText.push(this.emptyFieldValidation(e));\n    if (!this.validateEmail(e.target.value) && e.target.value.length > 0)\n      errorText.push(\"Not a valid E-mail\");\n    this.setState({ email: { value: e.target.value, error: errorText } });\n  };\n  handlePasswordChange = (e: any) => {\n    let errorText: string[] = [];\n    if (this.emptyFieldValidation(e))\n      errorText.push(this.emptyFieldValidation(e));\n    if (e.target.value.length < 6)\n      errorText.push(\"Password should be at least 6 characters!\");\n    this.setState({ password: { value: e.target.value, error: errorText } });\n  };\n  handleConfirmPasswordChange = (e: any) => {\n    let errorText: string[] = [];\n    if (this.emptyFieldValidation(e))\n      errorText.push(this.emptyFieldValidation(e));\n    if (e.target.value !== this.state.password.value)\n      errorText.push(\"Passwords don't match!\");\n    this.setState({\n      confirmPassword: { value: e.target.value, error: errorText },\n    });\n  };\n  handleSubmitClick = async (event: any) => {\n    event.preventDefault();\n    await this.handleFirstNameChange({\n      target: { value: this.state.firstName.value },\n    });\n    await this.handleLastNameChange({\n      target: { value: this.state.lastName.value },\n    });\n    await this.handleEmailChange({ target: { value: this.state.email.value } });\n    await this.handleConfirmPasswordChange({\n      target: { value: this.state.confirmPassword.value },\n    });\n    await this.handlePasswordChange({\n      target: { value: this.state.password.value },\n    });\n    let errors: number =\n      this.state.firstName.error.length +\n      this.state.lastName.error.length +\n      this.state.email.error.length +\n      this.state.password.error.length +\n      this.state.confirmPassword.error.length;\n    if (errors !== 0) {\n      return false;\n    } else {\n      fire\n        .auth()\n        .createUserWithEmailAndPassword(\n          this.state.email.value,\n          this.state.password.value\n        )\n        .then(() => {\n          let uid = fire.auth().currentUser?.uid;\n          let tempUser: UserInterface = {\n            uid: \"\",\n            firstName: this.state.firstName.value,\n            lastName: this.state.lastName.value,\n            roomCode: \"none\",\n          };\n          if (uid !== undefined) tempUser.uid = uid;\n          updateUser(tempUser);\n          this.props.onRegistered();\n        })\n        .catch((error) => {\n          let errorText: string[] = this.state.confirmPassword.error;\n          switch (error.code) {\n            case \"auth/email-already-in-use\": {\n              errorText.push(\n                \"This e-mail is already in use. Please login to continue.\"\n              );\n              break;\n            }\n            case \"auth/network-request-failed\": {\n              errorText.push(\"Unable to connect to the internet\");\n              break;\n            }\n            default: {\n              errorText.push(error.code);\n            }\n          }\n          this.setState({ confirmPassword: { value: \"\", error: errorText } });\n          this.setState({ password: { value: \"\", error: [] } });\n          return null;\n        });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"m-2\">\n          Welcome to {config.appName}\n          {this.state.firstName.value !== \"\" && \" \"}\n          {this.state.firstName.value}!\n        </h1>\n        <hr />\n        <form className=\"container\" noValidate={true}>\n          <div className=\"row\">\n            <div className=\"mt-2 form-group text-left col-md\">\n              <input\n                value={this.state.firstName.value}\n                className=\"form-control\"\n                placeholder=\"Enter First Name\"\n                onChange={this.handleFirstNameChange}\n                required\n              />\n              {this.state.firstName.error.map((e: any, index) => (\n                <small key={index} className=\"form-text text-danger\">\n                  {e}\n                </small>\n              ))}\n            </div>\n\n            <div className=\"form-group text-left col-md mt-2\">\n              <input\n                value={this.state.lastName.value}\n                className=\"form-control\"\n                placeholder=\"Enter Last Name\"\n                onChange={this.handleLastNameChange}\n                required\n              />\n              {this.state.lastName.error.map((e: any, index) => (\n                <small key={index} className=\"form-text text-danger\">\n                  {e}\n                </small>\n              ))}\n            </div>\n          </div>\n          <div className=\"form-group text-left\">\n            <input\n              value={this.state.email.value}\n              className=\"form-control\"\n              type=\"email\"\n              placeholder=\"Enter Email\"\n              onChange={this.handleEmailChange}\n              required\n            />\n            {this.state.email.error.map((e: any, index) => (\n              <small key={index} className=\"form-text text-danger\">\n                {e}\n              </small>\n            ))}\n          </div>\n          <div className=\"row\">\n            <div className=\"form-group text-left col-md\">\n              <input\n                className=\"form-control\"\n                type=\"password\"\n                placeholder=\"Enter Password\"\n                onChange={this.handlePasswordChange}\n                value={this.state.password.value}\n                required\n              />\n              {this.state.password.error.map((e: any, index) => (\n                <small key={index} className=\"form-text text-danger\">\n                  {e}\n                </small>\n              ))}\n            </div>\n            <div className=\"form-group text-left col-md\">\n              <input\n                className=\"form-control\"\n                type=\"password\"\n                value={this.state.confirmPassword.value}\n                placeholder=\"Confirm Password\"\n                onChange={this.handleConfirmPasswordChange}\n                required\n              />\n              {this.state.confirmPassword.error &&\n                this.state.confirmPassword.error.map((e: any, index) => (\n                  <small key={index} className=\"form-text text-danger\">\n                    {e}\n                  </small>\n                ))}\n            </div>\n          </div>\n          <input\n            type=\"submit\"\n            onClick={this.handleSubmitClick}\n            className=\"btn btn-primary\"\n            value=\"Start\"\n          />\n        </form>\n        <button className=\"btn btn-link\" onClick={this.props.registerToLogin}>\n          Already Registered? Login Now!\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Register;\n","import React, { Component } from \"react\";\nimport fire from \"../../firebase\";\n\ninterface loginInterface {\n  loginToRegister: any;\n  onLogin: any;\n}\n\nclass Login extends Component<loginInterface> {\n  state = {\n    email: { value: \"\", error: [] },\n    password: { value: \"\", error: [] },\n  };\n  emptyFieldValidation(e: any) {\n    if (e.target.value === \"\") {\n      return \"This field can't be empty\";\n    }\n    return \"\";\n  }\n\n  validateEmail(email: any) {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  }\n\n  handleEmailChange = (e: any) => {\n    let errorText: string[] = [];\n    if (this.emptyFieldValidation(e))\n      errorText.push(this.emptyFieldValidation(e));\n    if (!this.validateEmail(e.target.value) && e.target.value.length > 0)\n      errorText.push(\"Not a valid E-mail\");\n    this.setState({ email: { value: e.target.value, error: errorText } });\n  };\n  handlePasswordChange = (e: any) => {\n    let errorText: string[] = [];\n    if (this.emptyFieldValidation(e))\n      errorText.push(this.emptyFieldValidation(e));\n    this.setState({ password: { value: e.target.value, error: errorText } });\n  };\n  handleLoginClick = async (event: any) => {\n    event.preventDefault();\n    await this.handleEmailChange({ target: { value: this.state.email.value } });\n    await this.handlePasswordChange({\n      target: { value: this.state.password.value },\n    });\n    if (this.state.email.error.length + this.state.password.error.length !== 0)\n      return false;\n    fire\n      .auth()\n      .signInWithEmailAndPassword(\n        this.state.email.value,\n        this.state.password.value\n      )\n      .then(() => {\n        this.props.onLogin();\n      })\n      .catch((error: any) => {\n        let errorText: string[] = this.state.password.error;\n        switch (error.code) {\n          case \"auth/wrong-password\": {\n            errorText.push(\"Invalid Credentials!\");\n            break;\n          }\n          default: {\n            errorText.push(error.message);\n          }\n        }\n        this.setState({ password: { value: \"\", error: errorText } });\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Welcome Back!</h1>\n        <form noValidate={true}>\n          <div className=\"form-group text-left\">\n            <input\n              value={this.state.email.value}\n              className=\"form-control\"\n              type=\"email\"\n              required={true}\n              onChange={this.handleEmailChange}\n              placeholder=\"Enter Email\"\n            />\n            {this.state.email.error.map((e: any, index) => (\n              <small key={index} className=\"form-text text-danger\">\n                {e}\n              </small>\n            ))}\n          </div>\n          <div className=\"form-group text-left\">\n            <input\n              value={this.state.password.value}\n              className=\"form-control\"\n              type=\"password\"\n              required={true}\n              onChange={this.handlePasswordChange}\n              placeholder=\"Enter Password\"\n            />\n            {this.state.password.error.map((e: any, index) => (\n              <small key={index} className=\"form-text text-danger\">\n                {e}\n              </small>\n            ))}\n          </div>\n          <input\n            className=\"btn btn-primary\"\n            value=\"Login\"\n            onClick={this.handleLoginClick}\n            type=\"submit\"\n          />\n        </form>\n        <button className=\"btn btn-link\" onClick={this.props.loginToRegister}>\n          New to Game? Register Now!\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport Register from \"./register\";\nimport Login from \"./login\";\n\ninterface authenticationInterface {\n  hasAuthenticated: any;\n  registerToLogin: any;\n  loginToRegister: any;\n  visibilities: any;\n}\n\nclass Authentication extends Component<authenticationInterface> {\n  render() {\n    return (\n      <div className=\"container\">\n        {this.props.visibilities.registerCompVisibility && (\n          <Register\n            registerToLogin={this.props.registerToLogin}\n            onRegistered={this.props.hasAuthenticated}\n          />\n        )}\n        {this.props.visibilities.loginCompVisibility && (\n          <Login\n            loginToRegister={this.props.loginToRegister}\n            onLogin={this.props.hasAuthenticated}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Authentication;\n","import fire from \"../../firebase\";\nimport ParticipantInterface from \"./participantInterface\";\nimport QuestionInterface from \"./questionInterface\";\ninterface RoomInterface {\n  host: string;\n  participants: ParticipantInterface[];\n  waiting: ParticipantInterface[];\n  totalRounds: number;\n  currentRound: number;\n  allAnswersSubmitted: boolean;\n  allAnswersPicked: boolean;\n  allReadyForNextRound: boolean;\n  code: string;\n  questionBank: Array<QuestionInterface>;\n  roundOver: boolean;\n  waitingForPlayers: boolean;\n}\nexport default RoomInterface;\nexport let dummyRoom = (\n  host: string = \"dummy\",\n  participants: ParticipantInterface[] = [],\n  waiting: ParticipantInterface[] = [],\n  totalRounds: number = 0,\n  currentRound: number = 0,\n  allAnswersSubmitted: boolean = false,\n  allAnswersPicked: boolean = false,\n  allReadyForNextRound: boolean = false,\n  code: string = \"dummy\",\n  roundOver: boolean = false,\n  questionBank: Array<QuestionInterface> = [],\n  waitingForPlayers: boolean = false\n): RoomInterface => ({\n  host,\n  participants,\n  waiting,\n  totalRounds,\n  currentRound,\n  allAnswersSubmitted,\n  allAnswersPicked,\n  allReadyForNextRound,\n  code,\n  questionBank,\n  roundOver,\n  waitingForPlayers,\n});\nexport function updateRoom(room: RoomInterface) {\n  if (room.code === \"dummy\") {\n    console.trace();\n  }\n  return fire\n    .database()\n    .ref(\"rooms/\" + room.code)\n    .set(room);\n}\nexport function getRoom(roomCode: string): Promise<any> {\n  return fire\n    .database()\n    .ref(\"rooms/\" + roomCode)\n    .once(\"value\");\n}\n","interface AnswerInterface {\n  answerText: string;\n  submittedBy: string;\n  selectedBy: Array<string>;\n}\nexport let dummyAnswer = (\n  answerText: string = \"dummy\",\n  submittedBy: string = \"dummy\",\n  selectedBy: string[] = []\n): AnswerInterface => ({ answerText, submittedBy, selectedBy });\nexport default AnswerInterface;\n","import AnswerInterface, { dummyAnswer } from \"./answerInterface\";\n\ninterface ParticipantInterface {\n  uid: string;\n  score: number;\n  currentAnswer: AnswerInterface;\n  chosenAns: boolean;\n  readyForNextRound: boolean;\n}\nexport let dummyParticipant = (\n  uid: string = \"dummy\",\n  score: number = 0,\n  currentAnswer: AnswerInterface = dummyAnswer(),\n  chosenAns: boolean = false,\n  readyForNextRound: boolean = false\n): ParticipantInterface => ({\n  uid,\n  score,\n  currentAnswer,\n  chosenAns,\n  readyForNextRound,\n});\nexport default ParticipantInterface;\n","import React, { Component } from \"react\";\nimport { dummyRoom, getRoom, updateRoom } from \"../interfaces/RoomInterface\";\nimport { dummyParticipant } from \"../interfaces/participantInterface\";\n\ninterface menuInterface {\n  userCode: string;\n  onRoomCreate: any;\n  onRoomJoined: any;\n}\n\nclass HostJoin extends Component<menuInterface> {\n  state = {\n    joinGame: { value: \"\", error: [] },\n    hostGame: { value: \"\", error: [] },\n  };\n  consonants = [\n    \"b\",\n    \"c\",\n    \"d\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n  ];\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  onHost = (event: any) => {\n    event.preventDefault();\n    let code: string = this.randomGenerator();\n\n    getRoom(code)\n      .then((snapshot) => {\n        if (snapshot.val() === null) this.createRoom(code);\n      })\n      .catch((e) => {\n        this.setState({ hostGame: { value: \"\", error: [e.message] } });\n      });\n  };\n\n  randomGenerator(): string {\n    let letter1 = this.consonants[Math.floor(Math.random() * 21)];\n    let letter3 = this.consonants[Math.floor(Math.random() * 21)];\n    let letter2 = this.vowels[Math.floor(Math.random() * 5)];\n    let letter4 = this.vowels[Math.floor(Math.random() * 5)];\n    let letter6 = this.vowels[Math.floor(Math.random() * 5)];\n    let letter5 = this.consonants[Math.floor(Math.random() * 21)];\n    return letter1 + letter2 + letter3 + letter4 + letter5 + letter6;\n  }\n\n  createRoom = (code: string) => {\n    updateRoom(\n      dummyRoom(\n        this.props.userCode,\n        [dummyParticipant(this.props.userCode)],\n        [],\n        8,\n        undefined,\n        undefined,\n        undefined,\n        undefined,\n        code\n      )\n    )\n      .then(() => {\n        this.props.onRoomCreate(code);\n      })\n      .catch((e) => {\n        this.setState({ hostGame: { value: \"\", error: [e.message] } });\n      });\n  };\n  onCodeChange = (e: any) => {\n    this.setState({\n      joinGame: { value: e.target.value, error: this.state.joinGame.error },\n    });\n  };\n  joinRoom = (event: any) => {\n    event.preventDefault();\n    if (this.state.joinGame.value === \"\") {\n      this.setState({\n        joinGame: { value: \"\", error: [\"This field can't be empty\"] },\n      });\n      return;\n    }\n    getRoom(this.state.joinGame.value.toLowerCase()).then((snapshot) => {\n      if (snapshot.val()) {\n        let tempRoom = snapshot.val();\n        this.props.onRoomJoined(tempRoom.code);\n      } else {\n        let errors: string[] = [];\n        errors.push(\"Unable to find a game with that code\");\n        this.setState({\n          joinGame: { value: this.state.joinGame.value, error: errors },\n        });\n      }\n    });\n  };\n\n  render() {\n    return (\n      <form className=\"container\" noValidate={true}>\n        <h3 className=\"mb-4\">Enter Room Code</h3>\n        <div className=\"form-group text-left\">\n          <div className=\"row \">\n            <input\n              className=\"form-control mx-2 mt-2 col-md-9\"\n              onChange={this.onCodeChange}\n              placeholder=\"Room Code\"\n            />\n            <input\n              value=\"Join Room\"\n              type=\"submit\"\n              className=\"btn btn-secondary mx-2 mt-2 col-md-2\"\n              onClick={this.joinRoom}\n            />\n          </div>\n          {this.state.joinGame.error.map((e: any, index) => (\n            <small key={index} className=\"form-text text-danger\">\n              {e}\n            </small>\n          ))}\n        </div>\n\n        <h5 className=\"my-4\">or</h5>\n        <button className=\"btn btn-primary\" onClick={this.onHost}>\n          Host your own game!\n        </button>\n        {this.state.hostGame.error.map((e: any, index) => (\n          <small key={index} className=\"form-text text-danger\">\n            {e}\n          </small>\n        ))}\n      </form>\n    );\n  }\n}\n\nexport default HostJoin;\n","import React, { Component } from \"react\";\n\nclass LoadingText extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"h1 font-weight-light container\">\n          {this.props.children}\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default LoadingText;\n","import React, { Component } from \"react\";\nimport RoomInterface, {\n  dummyRoom,\n  updateRoom,\n} from \"../interfaces/RoomInterface\";\nimport fire from \"../../firebase\";\nimport config from \"../../config\";\nimport { dummyUser } from \"../interfaces/UserInterface\";\nimport { dummyParticipant } from \"../interfaces/participantInterface\";\n\ninterface controlsInterface {\n  userCode: string;\n  leaveRoom: any;\n  deleteRoom: any;\n  roomCode: string;\n  startGame: any;\n  newRound: any;\n}\n\nclass Controls extends Component<controlsInterface> {\n  state = {\n    room: dummyRoom(),\n    user: dummyUser(),\n    participant: dummyParticipant(),\n  };\n  mounted = false;\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    fire\n      .database()\n      .ref(\"/rooms/\" + this.props.roomCode)\n      .on(\"value\", (snapshot) => {\n        if (!this.mounted) return;\n        let room: RoomInterface = snapshot.val();\n        if (room) {\n          for (let participant of room.participants) {\n            if (participant.uid === this.props.userCode)\n              this.setState({ participant });\n          }\n\n          this.setState({ room: snapshot.val() });\n        }\n      });\n    fire\n      .database()\n      .ref(\"/users/\" + this.props.userCode)\n      .on(\"value\", (snapshot) => {\n        if (!this.mounted) return;\n        if (snapshot.val()) {\n          this.setState({ user: snapshot.val() });\n        }\n      });\n  }\n  participantReady = () => {\n    let tempRoom = this.state.room;\n    tempRoom.allReadyForNextRound = true;\n    for (let participant of tempRoom.participants) {\n      if (participant.uid === this.props.userCode)\n        participant.readyForNextRound = true;\n      else {\n        if (!participant.readyForNextRound)\n          tempRoom.allReadyForNextRound = false;\n      }\n    }\n    if (tempRoom.allReadyForNextRound) {\n      this.props.newRound();\n    }\n    updateRoom(tempRoom);\n  };\n\n  newGame = () => {\n    let tempRoom = this.state.room;\n    tempRoom.currentRound = 0;\n    tempRoom.roundOver = false;\n    updateRoom(tempRoom);\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        {this.state.room.code !== \"dummy\" &&\n          this.state.room.currentRound === 0 &&\n          this.state.room.participants.length < config.min_players && (\n            <h4 className=\"text-secondary font-weight-light m-2\">\n              {config.min_players - this.state.room.participants.length} more\n              player\n              {config.min_players - 1 !== this.state.room.participants.length &&\n                \"s\"}{\" \"}\n              needed to start\n            </h4>\n          )}\n        {this.state.room.code !== \"dummy\" &&\n          this.state.room.currentRound === 0 &&\n          this.state.user.uid !== this.state.room.host &&\n          this.state.room.participants.length >= config.min_players && (\n            <h4 className=\"text-secondary font-weight-light m-2\">\n              Waiting for host to start the game.\n            </h4>\n          )}\n        {this.state.room.code !== \"dummy\" &&\n          this.state.user.uid === this.state.room.host &&\n          this.state.room.currentRound === 0 && (\n            <div>\n              <button\n                type=\"button\"\n                className=\"btn btn-primary m-2\"\n                disabled={\n                  this.state.room.participants.length < config.min_players\n                }\n                onClick={this.props.startGame}\n              >\n                Start Game\n              </button>\n            </div>\n          )}\n        {this.state.room.code !== \"dummy\" &&\n          this.state.room.allAnswersPicked &&\n          !this.state.room.allReadyForNextRound &&\n          !this.state.participant.readyForNextRound && (\n            <div>\n              <button\n                className=\"btn btn-success m-2\"\n                onClick={this.participantReady}\n              >\n                Next Round\n              </button>\n            </div>\n          )}\n        {this.state.room.code !== \"dummy\" &&\n          this.state.room.roundOver &&\n          this.state.user.uid === this.state.room.host && (\n            <div>\n              <button className=\"btn btn-success m-2\" onClick={this.newGame}>\n                New Game\n              </button>\n            </div>\n          )}\n        {this.state.room.code !== \"dummy\" &&\n          this.state.room.roundOver &&\n          this.state.user.uid !== this.state.room.host && (\n            <h4 className=\"text-secondary font-weight-light m-2\">\n              Waiting for host to start another round.\n            </h4>\n          )}\n        {this.state.room.code !== \"dummy\" &&\n          this.state.room.waitingForPlayers && (\n            <h4 className=\"text-secondary font-weight-light m-2\">\n              Round terminated because of lack of players. Waiting for players.\n            </h4>\n          )}\n        {this.state.room.code !== \"dummy\" &&\n          this.state.user.uid === this.state.room.host && (\n            <div>\n              <button\n                className=\"btn btn-danger m-2\"\n                onClick={this.props.deleteRoom}\n              >\n                Delete Room\n              </button>\n            </div>\n          )}\n\n        {this.state.room.code !== \"dummy\" &&\n          this.state.user.uid !== this.state.room.host && (\n            <div>\n              <button\n                className=\"btn btn-danger m-2\"\n                onClick={this.props.leaveRoom}\n              >\n                Leave Room\n              </button>\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default Controls;\n","import React, { Component } from \"react\";\nimport fire from \"../../firebase\";\nimport RoomInterface, {\n  dummyRoom,\n  getRoom,\n  updateRoom,\n} from \"../interfaces/RoomInterface\";\nimport { dummyUser } from \"../interfaces/UserInterface\";\nimport { dummyParticipant } from \"../interfaces/participantInterface\";\n\nclass UserCard extends Component<{\n  userCode: string;\n  currUserCode: string;\n  host: string;\n  index: number;\n  roomCode: string;\n}> {\n  state = {\n    user: dummyUser(),\n    room: dummyRoom(),\n    participant: dummyParticipant(),\n  };\n  mounted = false;\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    fire\n      .database()\n      .ref(\"/users/\" + this.props.userCode)\n      .on(\"value\", (snapshot) => {\n        if (!this.mounted) return;\n        let user = snapshot.val();\n        if (user) {\n          this.setState({ user });\n        }\n      });\n    fire\n      .database()\n      .ref(\"/rooms/\" + this.props.roomCode)\n      .on(\"value\", (snapshot) => {\n        if (!this.mounted) return;\n        let room = snapshot.val();\n        if (room) {\n          this.setState({ room });\n\n          for (let p in room.participants)\n            if (room.participants[p].uid === this.props.userCode)\n              this.setState({ participant: room.participants[p] });\n        }\n      });\n  }\n\n  kick = () => {\n    getRoom(this.props.roomCode).then((snapshot) => {\n      if (snapshot.val()) {\n        let tempRoom: RoomInterface = snapshot.val();\n        tempRoom.participants = tempRoom.participants.filter(\n          (e) => e.uid !== this.props.userCode\n        );\n        updateRoom(tempRoom);\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"list-group-item d-flex justify-content-between align-items-center\">\n        <div>\n          <span className=\"badge badge-primary badge-pill m-1\">\n            {this.props.index + 1}\n          </span>\n          <span className=\"h4 m-1\">\n            {this.state.user.firstName === \"dummy\"\n              ? \"loading...\"\n              : this.state.user.firstName}\n          </span>\n          <span className=\"badge badge-info m-1\">\n            {this.props.userCode === this.props.currUserCode && \"You\"}\n          </span>\n          <span className=\"badge badge-secondary m-1\">\n            {this.props.userCode === this.props.host && \"Host\"}\n          </span>\n        </div>\n        <div>\n          {this.props.children === \"postAnswer\" && (\n            <span>\n              {this.state.participant.currentAnswer.submittedBy === \"dummy\" ? (\n                <svg\n                  width=\"1.5em\"\n                  height=\"1.5em\"\n                  viewBox=\"0 0 16 16\"\n                  className=\"bi bi-clock-fill\"\n                  fill=\"#ffbf00\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z\"\n                  />\n                </svg>\n              ) : (\n                <svg\n                  width=\"1.5em\"\n                  height=\"1.5em\"\n                  viewBox=\"0 0 16 16\"\n                  className=\"bi bi-check-circle-fill\"\n                  fill=\"MediumSeaGreen\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\"\n                  />\n                </svg>\n              )}\n            </span>\n          )}\n          {this.props.children === \"postAnswerPick\" && (\n            <span>\n              {!this.state.participant.chosenAns ? (\n                <svg\n                  width=\"1.5em\"\n                  height=\"1.5em\"\n                  viewBox=\"0 0 16 16\"\n                  className=\"bi bi-clock-fill\"\n                  fill=\"#ffbf00\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z\"\n                  />\n                </svg>\n              ) : (\n                <svg\n                  width=\"1.5em\"\n                  height=\"1.5em\"\n                  viewBox=\"0 0 16 16\"\n                  className=\"bi bi-check-circle-fill\"\n                  fill=\"MediumSeaGreen\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\"\n                  />\n                </svg>\n              )}\n            </span>\n          )}\n          {this.props.children === \"postReady\" && (\n            <span>\n              {!this.state.participant.readyForNextRound ? (\n                <svg\n                  width=\"1.5em\"\n                  height=\"1.5em\"\n                  viewBox=\"0 0 16 16\"\n                  className=\"bi bi-clock-fill\"\n                  fill=\"#ffbf00\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z\"\n                  />\n                </svg>\n              ) : (\n                <svg\n                  width=\"1.5em\"\n                  height=\"1.5em\"\n                  viewBox=\"0 0 16 16\"\n                  className=\"bi bi-check-circle-fill\"\n                  fill=\"MediumSeaGreen\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\"\n                  />\n                </svg>\n              )}\n            </span>\n          )}\n          {this.props.children === \"waitingLounge\" && (\n            <span>\n              <svg\n                width=\"1.5em\"\n                height=\"1.5em\"\n                viewBox=\"0 0 16 16\"\n                className=\"bi bi-clock-fill\"\n                fill=\"#ffbf00\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z\"\n                />\n              </svg>\n            </span>\n          )}\n          {this.props.currUserCode === this.props.host &&\n            this.props.userCode !== this.props.host && (\n              <span className=\"btn btn-sm btn-danger m-1\" onClick={this.kick}>\n                Kick\n              </span>\n            )}\n        </div>\n      </div>\n    );\n  }\n}\nexport default UserCard;\n","import React, { Component } from \"react\";\nimport RoomInterface, { dummyRoom } from \"../interfaces/RoomInterface\";\nimport fire from \"../../firebase\";\nimport LoadingText from \"../utilities/loadingText\";\nimport UserCard from \"../utilities/userCard\";\nimport ParticipantInterface from \"../interfaces/participantInterface\";\nimport { dummyUser } from \"../interfaces/UserInterface\";\n\ninterface loungeInterface {\n  roomCode: string;\n  userCode: string;\n  leaveRoom: any;\n  changeTotalRounds: any;\n}\n\nclass PreGameLounge extends Component<loungeInterface> {\n  state = {\n    room: dummyRoom(),\n    user: dummyUser(),\n    totalRounds: 8,\n  };\n  mounted = true;\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidMount() {\n    fire\n      .database()\n      .ref(\"/rooms/\" + this.props.roomCode)\n      .on(\"value\", (snapshot) => {\n        if (snapshot.val()) {\n          let room: RoomInterface = snapshot.val();\n          if (\n            !room.participants.some(\n              (participant) => participant.uid === this.props.userCode\n            )\n          ) {\n            if (room.hasOwnProperty(\"waiting\")) {\n              if (\n                !room.waiting.some(\n                  (participant) => participant.uid === this.props.userCode\n                )\n              ) {\n                this.props.leaveRoom();\n              }\n            } else this.props.leaveRoom();\n          }\n\n          if (!this.mounted) return;\n          this.setState({ room: snapshot.val() });\n        }\n      });\n    fire\n      .database()\n      .ref(\"/users/\" + this.props.userCode)\n      .on(\"value\", (snapshot) => {\n        if (snapshot.val()) {\n          if (!this.mounted) return;\n          this.setState({ user: snapshot.val() });\n        }\n      });\n  }\n  handleDecrement = () => {\n    if (this.state.totalRounds === 1) return;\n    this.props.changeTotalRounds(this.state.totalRounds - 1);\n    this.setState({ totalRounds: this.state.totalRounds - 1 });\n  };\n  handleIncrement = () => {\n    this.props.changeTotalRounds(this.state.totalRounds + 1);\n    this.setState({ totalRounds: this.state.totalRounds + 1 });\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        {this.state.room.code !== \"dummy\" && (\n          <div className=\"container\">\n            <i>Room Code: </i>\n            <h1 className=\"display-3\">{this.state.room.code}</h1>\n            <hr />\n            {this.state.room.host === this.state.user.uid &&\n              this.state.room.currentRound === 0 && (\n                <div className=\"m-3 h4 font-weight-light\">\n                  Total Rounds:\n                  <button\n                    className=\"btn btn-sm btn-danger m-2\"\n                    onClick={this.handleDecrement}\n                  >\n                    -\n                  </button>\n                  <span className=\"m-2 h3\">{this.state.totalRounds}</span>\n                  <button\n                    className=\"btn btn-sm btn-success m-2\"\n                    onClick={this.handleIncrement}\n                  >\n                    +\n                  </button>\n                </div>\n              )}\n            <div id=\"participants\" className=\"text-left\">\n              <div className=\"list-group\">\n                <div className=\"list-group-item active\">Participants:</div>\n                {this.state.room.participants.map(\n                  (participant: ParticipantInterface, i) => (\n                    <UserCard\n                      key={participant.uid}\n                      index={i}\n                      userCode={participant.uid}\n                      roomCode={this.props.roomCode}\n                      currUserCode={this.props.userCode}\n                      host={this.state.room.host}\n                    >\n                      preGame\n                    </UserCard>\n                  )\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n        {this.state.room.code === \"dummy\" ? (\n          <LoadingText>joining room</LoadingText>\n        ) : (\n          <hr className=\"m-3\" />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default PreGameLounge;\n","import React, { Component } from \"react\";\nimport LoadingText from \"../utilities/loadingText\";\nimport fire from \"../../firebase\";\nimport RoomInterface, {\n  dummyRoom,\n  updateRoom,\n} from \"../interfaces/RoomInterface\";\nimport config from \"../../config\";\nimport AnswerInterface, { dummyAnswer } from \"../interfaces/answerInterface\";\ninterface QuestionComponentInterface {\n  userCode: string;\n  roomCode: string;\n}\nclass Question extends Component<QuestionComponentInterface> {\n  state = {\n    loaded: false,\n    answer: \"\",\n    room: dummyRoom(),\n  };\n  mounted = false;\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    fire\n      .database()\n      .ref(\"/rooms/\" + this.props.roomCode)\n      .on(\"value\", (snapshot) => {\n        if (!this.mounted) return;\n        let room: RoomInterface = snapshot.val();\n        this.setState({\n          room,\n          loaded: !room.questionBank[\n            room.currentRound - 1\n          ].questionText.includes(config.hotString),\n        });\n      });\n  }\n\n  onAnswerChange = (e: any) => {\n    this.setState({ answer: e.target.value });\n  };\n  handleSubmit = () => {\n    let tempAnswer: AnswerInterface = dummyAnswer(\n      this.state.answer,\n      this.props.userCode\n    );\n    let tempRoom: RoomInterface = this.state.room;\n    if (tempRoom.questionBank[this.state.room.currentRound - 1].answers)\n      tempRoom.questionBank[this.state.room.currentRound - 1].answers.push(\n        tempAnswer\n      );\n    else {\n      tempRoom.questionBank[this.state.room.currentRound - 1].answers = [\n        tempAnswer,\n      ];\n    }\n    let allAnswersSubmitted = true;\n    for (let p in tempRoom.participants) {\n      if (tempRoom.participants[p].uid === this.props.userCode)\n        tempRoom.participants[p].currentAnswer = tempAnswer;\n      else {\n        if (tempRoom.participants[p].currentAnswer.answerText === \"dummy\")\n          allAnswersSubmitted = false;\n      }\n    }\n    tempRoom.allAnswersSubmitted = allAnswersSubmitted;\n\n    updateRoom(tempRoom);\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        {this.state.loaded ? (\n          <div>\n            <span className=\"badge badge-primary badge-pill\">\n              Round:{this.state.room.currentRound}\n            </span>\n            <span className=\"font-weight-light m-2 h3\">\n              {\n                this.state.room.questionBank[this.state.room.currentRound - 1]\n                  .questionText\n              }\n            </span>\n\n            <textarea\n              onChange={this.onAnswerChange}\n              className=\"form-control m-2\"\n              placeholder=\"Your answer\"\n              maxLength={10}\n            />\n            <button className=\"btn btn-primary m-2\" onClick={this.handleSubmit}>\n              Submit Answer\n            </button>\n          </div>\n        ) : (\n          <LoadingText>loading question</LoadingText>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Question;\n","import React, { Component } from \"react\";\nimport fire from \"../../firebase\";\nimport { dummyRoom } from \"../interfaces/RoomInterface\";\nimport ParticipantInterface from \"../interfaces/participantInterface\";\nimport UserCard from \"../utilities/userCard\";\nimport LoadingText from \"../utilities/loadingText\";\n\ninterface postAnswerLoungeInterface {\n  userCode: string;\n  roomCode: string;\n}\n\nclass PostAnswerLounge extends Component<postAnswerLoungeInterface> {\n  state = {\n    room: dummyRoom(),\n  };\n  mounted = false;\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    fire\n      .database()\n      .ref(\"/rooms/\" + this.props.roomCode)\n      .on(\"value\", (snapshot) => {\n        if (!this.mounted) return;\n        let room = snapshot.val();\n        if (room) this.setState({ room });\n      });\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        {this.state.room.code !== \"dummy\" && (\n          <div className=\"container\">\n            <i>Room Code: </i>\n            <h1 className=\"display-3\">{this.state.room.code}</h1>\n            <hr />\n            <div id=\"participants\" className=\"text-center\">\n              <div className=\"list-group text-left\">\n                <div className=\"list-group-item active\">Participants:</div>\n                {this.state.room.participants.map(\n                  (participant: ParticipantInterface, i) => (\n                    <UserCard\n                      key={participant.uid}\n                      index={i}\n                      userCode={participant.uid}\n                      roomCode={this.props.roomCode}\n                      currUserCode={this.props.userCode}\n                      host={this.state.room.host}\n                    >\n                      postAnswer\n                    </UserCard>\n                  )\n                )}\n              </div>\n              <div className=\"font-weight-light h4 m-3\">\n                Waiting for all players to submit their answers.\n              </div>\n            </div>\n          </div>\n        )}\n        {this.state.room.code === \"dummy\" ? (\n          <LoadingText>submitting answer</LoadingText>\n        ) : (\n          <hr className=\"m-3\" />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default PostAnswerLounge;\n","import React, { Component } from \"react\";\nimport AnswerInterface from \"../interfaces/answerInterface\";\nimport RoomInterface, {\n  dummyRoom,\n  updateRoom,\n} from \"../interfaces/RoomInterface\";\nimport fire from \"../../firebase\";\ninterface AnswerCardInterface {\n  roomCode: string;\n  answer: AnswerInterface;\n  userCode: string;\n  animatingIndex: number;\n  index: number;\n  incrementAnimatingIndex: any;\n}\nclass AnswerCard extends Component<AnswerCardInterface> {\n  state = {\n    room: dummyRoom(),\n    classes: \"\",\n  };\n  mounted = false;\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    if (this.props.animatingIndex < this.props.index) {\n      this.setState({ classes: \"d-none\" });\n    }\n    if (this.props.animatingIndex === this.props.index) {\n      this.setState({ classes: \"answerCard\" });\n    }\n    fire\n      .database()\n      .ref(\"/rooms/\" + this.props.roomCode)\n      .on(\"value\", (snapshot) => {\n        if (!this.mounted) return;\n        let room = snapshot.val();\n        if (room) {\n          this.setState({ room });\n        }\n      });\n  }\n  handleClick = (e: any) => {\n    e.preventDefault();\n    let tempRoom: RoomInterface = this.state.room;\n    for (let ans of tempRoom.questionBank[tempRoom.currentRound - 1].answers) {\n      if (ans.submittedBy === this.props.answer.submittedBy) {\n        if (ans.selectedBy) ans.selectedBy.push(this.props.userCode);\n        else ans.selectedBy = [this.props.userCode];\n      }\n    }\n    tempRoom.allAnswersPicked = true;\n    for (let part of tempRoom.participants) {\n      if (part.uid === this.props.userCode) {\n        part.chosenAns = true;\n      } else {\n        if (!part.chosenAns) tempRoom.allAnswersPicked = false;\n      }\n    }\n    if (tempRoom.allAnswersPicked) {\n      for (let ans of tempRoom.questionBank[tempRoom.currentRound - 1]\n        .answers) {\n        for (let p of tempRoom.participants) {\n          if (p.uid === ans.submittedBy && ans.hasOwnProperty(\"selectedBy\")) {\n            p.score += ans.selectedBy.length * ans.selectedBy.length;\n          }\n        }\n      }\n    }\n    tempRoom.participants.sort((a, b) => b.score - a.score);\n\n    updateRoom(tempRoom);\n  };\n  render() {\n    return (\n      <div\n        className={this.state.classes}\n        onAnimationEnd={this.props.incrementAnimatingIndex}\n      >\n        {this.state.room.code !== \"dummy\" ? (\n          <button\n            onClick={this.handleClick}\n            className=\"list-group-item list-group-item-action btn btn-link d-flex justify-content-between align-items-center\"\n          >\n            {this.props.answer.answerText}\n          </button>\n        ) : (\n          <div className=\"list-group-item d-flex justify-content-between align-items-center\">\n            loading\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AnswerCard;\n","import React, { Component } from \"react\";\nimport { dummyUser } from \"../interfaces/UserInterface\";\nimport { dummyRoom } from \"../interfaces/RoomInterface\";\nimport { dummyParticipant } from \"../interfaces/participantInterface\";\nimport fire from \"../../firebase\";\nimport AnswerInterface from \"../interfaces/answerInterface\";\nimport AnswerCard from \"../utilities/answerCard\";\nimport LoadingText from \"../utilities/loadingText\";\ninterface AnswerPickLoungeInterface {\n  userCode: string;\n  roomCode: string;\n}\nclass AnswerPickLounge extends Component<AnswerPickLoungeInterface> {\n  state = {\n    user: dummyUser(),\n    room: dummyRoom(),\n    participant: dummyParticipant(),\n    animatingIndex: 0,\n  };\n  mounted = false;\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    fire\n      .database()\n      .ref(\"/users/\" + this.props.userCode)\n      .on(\"value\", (snapshot) => {\n        if (!this.mounted) return;\n        let user = snapshot.val();\n        if (user) {\n          this.setState({ user });\n        }\n      });\n    fire\n      .database()\n      .ref(\"/rooms/\" + this.props.roomCode)\n      .on(\"value\", (snapshot) => {\n        if (!this.mounted) return;\n        let room = snapshot.val();\n        if (room) {\n          room.questionBank[room.currentRound - 1].answers = room.questionBank[\n            room.currentRound - 1\n          ].answers.filter((answer: AnswerInterface) => {\n            return answer.submittedBy !== this.props.userCode;\n          });\n          this.setState({ room });\n          if (this.state.participant.uid === \"dummy\") {\n            for (let p in room.participants)\n              if (room.participants[p].uid === this.props.userCode)\n                this.setState({ participant: room.participants[p] });\n          }\n        }\n      });\n  }\n  incrementAnimatingIndex = () => {\n    this.setState({ animatingIndex: this.state.animatingIndex + 1 });\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.room.code !== \"dummy\" && (\n          <div id=\"participants\" className=\"text-left\">\n            <div className=\"list-group\">\n              <div className=\"list-group-item active\">Pick an Answer:</div>\n              {this.state.room.questionBank[\n                this.state.room.currentRound - 1\n              ].answers.map((answer: AnswerInterface, i) => {\n                if (answer.submittedBy !== this.state.user.uid)\n                  return (\n                    <AnswerCard\n                      key={\n                        answer.submittedBy +\n                        this.state.animatingIndex.toString()\n                      }\n                      incrementAnimatingIndex={this.incrementAnimatingIndex}\n                      index={i}\n                      roomCode={this.props.roomCode}\n                      answer={answer}\n                      userCode={this.props.userCode}\n                      animatingIndex={this.state.animatingIndex}\n                    />\n                  );\n                return undefined;\n              })}\n            </div>\n          </div>\n        )}\n        {this.state.room.code === \"dummy\" ? (\n          <LoadingText>loading answers</LoadingText>\n        ) : (\n          <hr className=\"m-3\" />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AnswerPickLounge;\n","import React, { Component } from \"react\";\nimport ParticipantInterface from \"../interfaces/participantInterface\";\nimport UserCard from \"../utilities/userCard\";\nimport LoadingText from \"../utilities/loadingText\";\nimport { dummyRoom } from \"../interfaces/RoomInterface\";\nimport fire from \"../../firebase\";\ninterface PostAnswerPickLoungeInterface {\n  userCode: string;\n  roomCode: string;\n}\nclass PostAnswerPickLounge extends Component<PostAnswerPickLoungeInterface> {\n  state = {\n    room: dummyRoom(),\n  };\n  mounted = false;\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    fire\n      .database()\n      .ref(\"/rooms/\" + this.props.roomCode)\n      .on(\"value\", (snapshot) => {\n        if (!this.mounted) return;\n        let room = snapshot.val();\n        if (room) this.setState({ room });\n      });\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        {this.state.room.code !== \"dummy\" && (\n          <div className=\"container\">\n            <i>Room Code: </i>\n            <h1 className=\"display-3\">{this.state.room.code}</h1>\n            <hr />\n            <div id=\"participants\" className=\"text-center\">\n              <div className=\"list-group text-left\">\n                <div className=\"list-group-item active\">Participants:</div>\n                {this.state.room.participants.map(\n                  (participant: ParticipantInterface, i) => (\n                    <UserCard\n                      key={participant.uid}\n                      index={i}\n                      userCode={participant.uid}\n                      roomCode={this.props.roomCode}\n                      currUserCode={this.props.userCode}\n                      host={this.state.room.host}\n                    >\n                      postAnswerPick\n                    </UserCard>\n                  )\n                )}\n              </div>\n              <div className=\"font-weight-light h4 m-3\">\n                Waiting for all players to pick an answer.\n              </div>\n            </div>\n          </div>\n        )}\n        {this.state.room.code === \"dummy\" ? (\n          <LoadingText>submitting answer</LoadingText>\n        ) : (\n          <hr className=\"m-3\" />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default PostAnswerPickLounge;\n","import React, { Component } from \"react\";\nimport { codeToName, dummyUser } from \"../interfaces/UserInterface\";\nimport RoomInterface, { dummyRoom } from \"../interfaces/RoomInterface\";\nimport ParticipantInterface, {\n  dummyParticipant,\n} from \"../interfaces/participantInterface\";\nimport fire from \"../../firebase\";\nimport { dummyAnswer } from \"../interfaces/answerInterface\";\ninterface ScoreCardInterface {\n  userCode: string;\n  roomCode: string;\n  index: number;\n}\nclass ScoreCard extends Component<ScoreCardInterface> {\n  state = {\n    user: dummyUser(),\n    room: dummyRoom(),\n    participant: dummyParticipant(),\n    answer: dummyAnswer(),\n    answerPickedBy: [],\n  };\n  mounted = false;\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    fire\n      .database()\n      .ref(\"/users/\" + this.props.userCode)\n      .on(\"value\", (snapshot) => {\n        if (!this.mounted) return;\n        let user = snapshot.val();\n        if (user) {\n          this.setState({ user });\n        }\n      });\n    fire\n      .database()\n      .ref(\"/rooms/\" + this.props.roomCode)\n      .on(\"value\", (snapshot) => {\n        if (!this.mounted) return;\n        let room = snapshot.val();\n        if (room) {\n          this.setState({ room });\n\n          for (let p of room.participants)\n            if (p.uid === this.props.userCode) {\n              this.setState({ participant: p });\n              if (room.questionBank[room.currentRound - 1].answers)\n                this.participantAnswer(p, room);\n            }\n        }\n      });\n  }\n  participantAnswer = (part: ParticipantInterface, room: RoomInterface) => {\n    for (let ans of room.questionBank[room.currentRound - 1].answers) {\n      if (ans.submittedBy === part.uid) {\n        if (!this.mounted) return;\n        this.setState({\n          answer: ans,\n        });\n        if (ans.hasOwnProperty(\"selectedBy\"))\n          codeToName(ans.selectedBy).then((s) => {\n            if (!this.mounted) return;\n            this.setState({ answerPickedBy: s });\n          });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"list-group-item d-flex flex-wrap justify-content-between align-items-center\">\n        <div className=\"badge badge-primary badge-pill m-1\">\n          {this.props.index + 1}\n        </div>\n        <div className=\"text-left mx-2 flex-grow-1 font-weight-light\">\n          <div className=\"h4 m-1\">\n            {this.state.user.firstName === \"dummy\"\n              ? \"loading...\"\n              : this.state.user.firstName}\n          </div>\n          submitted{\" \"}\n          <span className=\"badge-light badge badge-pill\">\n            {this.state.answer.answerText}\n          </span>{\" \"}\n          which was picked by{\" \"}\n          {this.state.user.uid !== \"dummy\" &&\n            this.state.answerPickedBy.length === 0 &&\n            \"no-one.\"}\n          {this.state.answerPickedBy.map((ans: any, index) => {\n            let l = this.state.answerPickedBy.length;\n            let punctuation = \"\";\n            if (l - 1 === index) {\n              if (l !== 1) punctuation = \" and \";\n            } else {\n              if (index !== 0) punctuation = \", \";\n            }\n            return (\n              <span key={index}>\n                {punctuation}\n                <span className=\"badge badge-info badge-pill m-1\">{ans}</span>\n              </span>\n            );\n          })}\n        </div>\n        <span>\n          Score:\n          <span className=\"badge badge-info badge-pill m-1\">\n            {this.state.participant.score}\n          </span>\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default ScoreCard;\n","import React, { Component } from \"react\";\nimport RoomInterface, { dummyRoom } from \"../interfaces/RoomInterface\";\nimport { codeToName, dummyUser } from \"../interfaces/UserInterface\";\nimport { dummyParticipant } from \"../interfaces/participantInterface\";\nimport fire from \"../../firebase\";\nimport LoadingText from \"../utilities/loadingText\";\nimport ScoreCard from \"../utilities/scoreCard\";\ninterface ScoreboardLoungeInterace {\n  userCode: string;\n  roomCode: string;\n}\nclass ScoreboardLounge extends Component<ScoreboardLoungeInterace> {\n  state = {\n    room: dummyRoom(),\n    user: dummyUser(),\n    participant: dummyParticipant(),\n    answerPickedBy: [],\n    answerPickedOf: \"\",\n  };\n  mounted = false;\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    fire\n      .database()\n      .ref(\"/rooms/\" + this.props.roomCode)\n      .on(\"value\", (snapshot) => {\n        if (!this.mounted) return;\n        let room: RoomInterface = snapshot.val();\n        if (room) {\n          for (let participant of room.participants) {\n            if (participant.uid === this.props.userCode)\n              this.setState({ participant });\n          }\n          if (room.questionBank[room.currentRound - 1].answers) {\n            for (let answer of room.questionBank[room.currentRound - 1]\n              .answers) {\n              if (\n                answer.hasOwnProperty(\"selectedBy\") &&\n                answer.submittedBy === this.props.userCode\n              ) {\n                codeToName(answer.selectedBy).then((s) => {\n                  if (!this.mounted) return;\n                  this.setState({ answerPickedBy: s });\n                });\n              }\n              if (\n                answer.hasOwnProperty(\"selectedBy\") &&\n                answer.selectedBy.includes(this.props.userCode)\n              ) {\n                codeToName([this.props.userCode]).then((s) => {\n                  if (!this.mounted) return;\n                  this.setState({ answerPickedOf: s[0] });\n                });\n              }\n            }\n          }\n          this.setState({ room: snapshot.val() });\n        }\n      });\n    fire\n      .database()\n      .ref(\"/users/\" + this.props.userCode)\n      .on(\"value\", (snapshot) => {\n        if (!this.mounted) return;\n        if (snapshot.val()) {\n          this.setState({ user: snapshot.val() });\n        }\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.answerPickedOf !== \"\" && (\n          <div>\n            <div className=\"h3 font-weight-light\">\n              You Picked{\" \"}\n              <span className=\"badge badge-warning badge-pill\">\n                {this.state.answerPickedOf}\n              </span>\n              's answer!\n            </div>\n            {this.state.answerPickedBy.length > 0 && (\n              <div className=\"h3 font-weight-light\">\n                Your Answer was picked by{\" \"}\n                {this.state.answerPickedBy.map((ans: any, index) => {\n                  let l = this.state.answerPickedBy.length;\n                  let punctuation = \"\";\n                  if (l - 1 === index) {\n                    if (l !== 1) punctuation = \" and \";\n                  } else {\n                    if (index !== 0) punctuation = \", \";\n                  }\n                  return (\n                    <span key={index}>\n                      {punctuation}\n                      <span className=\"badge badge-info badge-pill m-1\">\n                        {ans}\n                      </span>\n                    </span>\n                  );\n                })}\n              </div>\n            )}\n            {this.state.answerPickedBy.length === 0 && (\n              <div>No-one picked your answer:(</div>\n            )}\n          </div>\n        )}\n        <div className=\"list-group\">\n          <div className=\"list-group-item active\">Scoreboard:</div>\n          {this.state.room.participants.map((participant, index) => (\n            <ScoreCard\n              key={participant.uid}\n              index={index}\n              userCode={participant.uid}\n              roomCode={this.props.roomCode}\n            />\n          ))}\n        </div>\n        {this.state.answerPickedOf === \"\" && (\n          <LoadingText>loading scoreboard</LoadingText>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default ScoreboardLounge;\n","import React, { Component } from \"react\";\nimport ParticipantInterface from \"../interfaces/participantInterface\";\nimport UserCard from \"../utilities/userCard\";\nimport LoadingText from \"../utilities/loadingText\";\nimport { dummyRoom } from \"../interfaces/RoomInterface\";\nimport fire from \"../../firebase\";\ninterface PostReadyLoungeInterface {\n  userCode: string;\n  roomCode: string;\n}\nclass PostReadyLounge extends Component<PostReadyLoungeInterface> {\n  state = {\n    room: dummyRoom(),\n  };\n  mounted = false;\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    fire\n      .database()\n      .ref(\"/rooms/\" + this.props.roomCode)\n      .on(\"value\", (snapshot) => {\n        if (!this.mounted) return;\n        let room = snapshot.val();\n        if (room) this.setState({ room });\n      });\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        {this.state.room.code !== \"dummy\" && (\n          <div className=\"container\">\n            <i>Room Code: </i>\n            <h1 className=\"display-3\">{this.state.room.code}</h1>\n            <hr />\n            <div id=\"participants\" className=\"text-center\">\n              <div className=\"list-group text-left\">\n                <div className=\"list-group-item active\">Participants:</div>\n                {this.state.room.participants.map(\n                  (participant: ParticipantInterface, i) => (\n                    <UserCard\n                      key={participant.uid}\n                      index={i}\n                      userCode={participant.uid}\n                      roomCode={this.props.roomCode}\n                      currUserCode={this.props.userCode}\n                      host={this.state.room.host}\n                    >\n                      postReady\n                    </UserCard>\n                  )\n                )}\n              </div>\n              <div className=\"font-weight-light h4 m-3\">\n                Waiting for all players to be ready for next round.\n              </div>\n            </div>\n          </div>\n        )}\n        {this.state.room.code === \"dummy\" ? (\n          <LoadingText>submitting answer</LoadingText>\n        ) : (\n          <hr className=\"m-3\" />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default PostReadyLounge;\n","import React, { Component } from \"react\";\nimport { dummyRoom } from \"../interfaces/RoomInterface\";\nimport fire from \"../../firebase\";\nimport { codeToName } from \"../interfaces/UserInterface\";\ninterface FinalResultInterface {\n  roomCode: string;\n}\nclass FinalResult extends Component<FinalResultInterface> {\n  state = {\n    room: dummyRoom(),\n    winners: [],\n  };\n  mounted = false;\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    fire\n      .database()\n      .ref(\"/rooms/\" + this.props.roomCode)\n      .on(\"value\", (snapshot) => {\n        if (!this.mounted) return;\n        let room = snapshot.val();\n        if (room) {\n          this.setState({ room });\n          let tempWinners = [];\n          for (let part of room.participants) {\n            if (part.score === room.participants[0].score) {\n              tempWinners.push(part.uid);\n            }\n          }\n          codeToName(tempWinners).then((s) => {\n            if (!this.mounted) return;\n            this.setState({ winners: s });\n          });\n        }\n      });\n  }\n  render() {\n    return (\n      <div>\n        {this.state.winners.length > 0 && (\n          <div className=\"h1\">\n            <div className=\"h1 m-4 font-weight-light\">\n              {this.state.winners.length === 1 ? \"Winner:\" : \"Winners:\"}\n            </div>\n            {this.state.winners.map((ans: any, index) => {\n              let l = this.state.winners.length;\n              let punctuation = \"\";\n              if (l - 1 === index) {\n                if (l !== 1) punctuation = \" and \";\n              } else {\n                if (index !== 0) punctuation = \", \";\n              }\n              return (\n                <span key={index}>\n                  {punctuation}\n                  <span className=\"badge badge-info badge-pill m-1\" key={index}>\n                    {ans}\n                  </span>\n                </span>\n              );\n            })}\n          </div>\n        )}\n        <hr className=\"m-3\" />\n      </div>\n    );\n  }\n}\n\nexport default FinalResult;\n","import React, { Component } from \"react\";\nimport { dummyRoom } from \"../interfaces/RoomInterface\";\nimport { dummyUser } from \"../interfaces/UserInterface\";\nimport fire from \"../../firebase\";\nimport ParticipantInterface from \"../interfaces/participantInterface\";\nimport UserCard from \"../utilities/userCard\";\ninterface waitingLoungeInterface {\n  roomCode: string;\n  userCode: string;\n}\n\nclass WaitingLounge extends Component<waitingLoungeInterface> {\n  state = {\n    room: dummyRoom(),\n    user: dummyUser(),\n  };\n  mounted = true;\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidMount() {\n    fire\n      .database()\n      .ref(\"/rooms/\" + this.props.roomCode)\n      .on(\"value\", (snapshot) => {\n        if (snapshot.val()) {\n          this.setState({ room: snapshot.val() });\n        }\n      });\n    fire\n      .database()\n      .ref(\"/users/\" + this.props.userCode)\n      .on(\"value\", (snapshot) => {\n        if (snapshot.val()) {\n          if (!this.mounted) return;\n          this.setState({ user: snapshot.val() });\n        }\n      });\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        {this.state.room.code !== \"dummy\" && (\n          <div className=\"container\">\n            <i>Room Code: </i>\n            <h1 className=\"display-3\">{this.state.room.code}</h1>\n            <hr />\n            <div id=\"participants\" className=\"text-center\">\n              <div className=\"list-group text-left\">\n                <div className=\"list-group-item active\">Waiting Lounge:</div>\n                {this.state.room.waiting.map(\n                  (participant: ParticipantInterface, i) => (\n                    <UserCard\n                      key={participant.uid}\n                      index={i}\n                      userCode={participant.uid}\n                      roomCode={this.props.roomCode}\n                      currUserCode={this.props.userCode}\n                      host={this.state.room.host}\n                    >\n                      waitingLounge\n                    </UserCard>\n                  )\n                )}\n              </div>\n              <div className=\"font-weight-light h4 m-3\">\n                Waiting for the next round to begin.\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default WaitingLounge;\n","import React, { Component } from \"react\";\nimport fire from \"../../firebase\";\nimport RoomInterface, {\n  dummyRoom,\n  getRoom,\n  updateRoom,\n} from \"../interfaces/RoomInterface\";\nimport Controls from \"../utilities/controls\";\nimport PreGameLounge from \"../lounges/preGameLounge\";\nimport QuestionInterface from \"../interfaces/questionInterface\";\nimport Question from \"./question\";\nimport LoadingText from \"../utilities/loadingText\";\nimport PostAnswerLounge from \"../lounges/postAnswerLounge\";\nimport ParticipantInterface, {\n  dummyParticipant,\n} from \"../interfaces/participantInterface\";\nimport AnswerPickLounge from \"../lounges/answerPickLounge\";\nimport PostAnswerPickLounge from \"../lounges/postAnswerPickLounge\";\nimport ScoreboardLounge from \"../lounges/scoreboardLounge\";\nimport PostReadyLounge from \"../lounges/postReadyLounge\";\nimport FinalResult from \"./finalResult\";\nimport WaitingLounge from \"../lounges/waitingLounge\";\nimport config from \"../../config\";\nimport { dummyAnswer } from \"../interfaces/answerInterface\";\nimport { codeToName } from \"../interfaces/UserInterface\";\ninterface gameInterface {\n  userCode: string;\n  roomCode: string;\n  leaveRoom: Function;\n  deleteRoom: Function;\n}\nclass MainGame extends Component<gameInterface> {\n  mounted = false;\n  state = {\n    room: dummyRoom(),\n    participant: dummyParticipant(),\n    totalRounds: 8,\n    waiting: false,\n  };\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    fire\n      .database()\n      .ref(\"/rooms/\" + this.props.roomCode)\n      .on(\"value\", (snapshot) => {\n        if (!this.mounted) return;\n        let room = snapshot.val();\n        if (room) {\n          if (\n            room.waitingForPlayers &&\n            room.participants.length >= config.min_players\n          ) {\n            room.waitingForPlayers = false;\n            this.setState({ room }, this.newRound);\n          }\n          if (\n            room.participants.length < config.min_players &&\n            room.currentRound > 0 &&\n            !room.waitingForPlayers\n          ) {\n            if (room.hasOwnProperty(\"waiting\")) {\n              room.participants.push(...room.waiting);\n              room.waiting = [];\n            }\n            room.waitingForPlayers = true;\n\n            updateRoom(room);\n            this.setState({ room });\n          } else\n            this.setState({\n              room,\n              waiting:\n                room.hasOwnProperty(\"waiting\") &&\n                room.waiting.some(\n                  (participant: ParticipantInterface) =>\n                    participant.uid === this.props.userCode\n                ),\n            });\n          for (let participant of room.participants) {\n            if (participant.uid === this.props.userCode) {\n              this.setState({ participant });\n            }\n          }\n        } else {\n          this.props.leaveRoom();\n        }\n      });\n  }\n  randomSelector = (part: Array<ParticipantInterface>, slots: number) => {\n    let tempParticipants: Array<string> = [];\n    while (tempParticipants.length !== slots) {\n      let ind: number = Math.floor(Math.random() * part.length);\n      if (part.length < slots) tempParticipants.push(part[ind].uid);\n      else if (!tempParticipants.includes(part[ind].uid))\n        tempParticipants.push(part[ind].uid);\n    }\n    return tempParticipants;\n  };\n\n  plugIn = (part: Array<string>, text: string, room: RoomInterface) => {\n    for (let p = 0; p < part.length; p++) {\n      text = text.replace(config.hotString, part[p]);\n    }\n    room.questionBank[room.currentRound - 1].questionText = text;\n\n    updateRoom(room);\n  };\n\n  newRound = () => {\n    let tempRoom = this.state.room;\n    tempRoom.allReadyForNextRound = false;\n    tempRoom.allAnswersPicked = false;\n    tempRoom.allAnswersSubmitted = false;\n    if (tempRoom.hasOwnProperty(\"waiting\")) {\n      tempRoom.participants.push(...tempRoom.waiting);\n      tempRoom.waiting = [];\n    }\n    for (let p of tempRoom.participants) {\n      p.readyForNextRound = false;\n      p.chosenAns = false;\n      p.currentAnswer = dummyAnswer();\n    }\n\n    if (tempRoom.currentRound !== tempRoom.totalRounds) {\n      tempRoom.currentRound++;\n      let tempParticipants: Array<string> = this.randomSelector(\n        tempRoom.participants,\n        tempRoom.questionBank[tempRoom.currentRound - 1].slots\n      );\n      codeToName(tempParticipants).then((s) => {\n        this.plugIn(\n          s,\n          tempRoom.questionBank[tempRoom.currentRound - 1].questionText,\n          tempRoom\n        );\n      });\n    } else {\n      tempRoom.roundOver = true;\n      updateRoom(tempRoom);\n    }\n  };\n\n  changeTotalRounds = (totalRounds: number) => {\n    this.setState({ totalRounds });\n  };\n\n  startGame = () => {\n    getRoom(this.props.roomCode).then((snapshot) => {\n      if (snapshot.val()) {\n        let tempRoom: RoomInterface = snapshot.val();\n        tempRoom.totalRounds = this.state.totalRounds;\n        tempRoom.currentRound = 1;\n        tempRoom.roundOver = false;\n\n        fire\n          .database()\n          .ref(\"/questionBank/\")\n          .once(\"value\", (snapshot) => {\n            if (snapshot.val()) {\n              let bank = snapshot.val();\n              let tempArray: Array<QuestionInterface> = [];\n              while (tempArray.length !== tempRoom.totalRounds) {\n                if (Object.keys(bank).length === 0) {\n                  bank = snapshot.val();\n                }\n                let ind: number = Math.floor(\n                  Math.random() * (Object.keys(bank).length - 1)\n                );\n                if (bank[ind]) {\n                  tempArray.push(bank[ind]);\n                  delete bank[ind];\n                }\n              }\n\n              tempRoom.questionBank = tempArray;\n              let tempParticipants: Array<string> = this.randomSelector(\n                tempRoom.participants,\n                tempRoom.questionBank[tempRoom.currentRound - 1].slots\n              );\n              codeToName(tempParticipants).then((s) => {\n                this.plugIn(\n                  s,\n                  tempRoom.questionBank[tempRoom.currentRound - 1].questionText,\n                  tempRoom\n                );\n              });\n              updateRoom(tempRoom);\n            }\n          });\n      }\n    });\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        {this.state.waiting && (\n          <WaitingLounge\n            roomCode={this.props.roomCode}\n            userCode={this.props.userCode}\n            key={\"waitinglounge\" + this.props.userCode + this.props.roomCode}\n          />\n        )}\n        {(this.state.room.currentRound === 0 ||\n          this.state.room.participants.length < config.min_players) &&\n          !this.state.waiting && (\n            <PreGameLounge\n              roomCode={this.props.roomCode}\n              userCode={this.props.userCode}\n              leaveRoom={this.props.leaveRoom}\n              key={\"pregamelounge\" + this.props.userCode + this.props.roomCode}\n              changeTotalRounds={this.changeTotalRounds}\n            />\n          )}\n        {this.state.room.currentRound > 0 &&\n          this.state.room.participants.length >= config.min_players &&\n          !this.state.waiting &&\n          this.state.room.questionBank.length !==\n            this.state.room.totalRounds && (\n            <LoadingText\n              key={\"loadingtext\" + this.props.userCode + this.props.roomCode}\n            >\n              starting game\n            </LoadingText>\n          )}\n        {this.state.participant.currentAnswer.answerText !== \"dummy\" &&\n          this.state.room.participants.length >= config.min_players &&\n          !this.state.waiting &&\n          !this.state.room.allAnswersSubmitted && (\n            <PostAnswerLounge\n              roomCode={this.props.roomCode}\n              key={\n                \"postanswerlounge\" + this.props.userCode + this.props.roomCode\n              }\n              userCode={this.props.userCode}\n            />\n          )}\n        {this.state.participant.currentAnswer.answerText !== \"dummy\" &&\n          this.state.room.participants.length >= config.min_players &&\n          !this.state.waiting &&\n          this.state.room.allAnswersSubmitted &&\n          !this.state.participant.chosenAns && (\n            <AnswerPickLounge\n              key={\n                \"AnswerPickLounge\" + this.props.userCode + this.props.roomCode\n              }\n              roomCode={this.props.roomCode}\n              userCode={this.props.userCode}\n            />\n          )}\n        {this.state.participant.currentAnswer.answerText !== \"dummy\" &&\n          this.state.room.participants.length >= config.min_players &&\n          !this.state.waiting &&\n          this.state.room.allAnswersSubmitted &&\n          !this.state.room.allAnswersPicked &&\n          this.state.participant.chosenAns && (\n            <PostAnswerPickLounge\n              key={\n                \"PostAnswerPickLounge\" +\n                this.props.userCode +\n                this.props.roomCode\n              }\n              roomCode={this.props.roomCode}\n              userCode={this.props.userCode}\n            />\n          )}\n        {this.state.participant.currentAnswer.answerText !== \"dummy\" &&\n          this.state.room.participants.length >= config.min_players &&\n          !this.state.waiting &&\n          this.state.participant.readyForNextRound &&\n          !this.state.room.allReadyForNextRound && (\n            <PostReadyLounge\n              key={\n                \"PostReadyLounge\" + this.props.userCode + this.props.roomCode\n              }\n              roomCode={this.props.roomCode}\n              userCode={this.props.userCode}\n            />\n          )}\n        {this.state.participant.currentAnswer.answerText !== \"dummy\" &&\n          this.state.room.participants.length >= config.min_players &&\n          !this.state.waiting &&\n          this.state.room.allAnswersPicked &&\n          !this.state.room.allReadyForNextRound &&\n          !this.state.participant.readyForNextRound && (\n            <ScoreboardLounge\n              key={\n                \"ScoreboardLounge\" + this.props.userCode + this.props.roomCode\n              }\n              roomCode={this.props.roomCode}\n              userCode={this.props.userCode}\n            />\n          )}\n        {this.state.room.currentRound > 0 &&\n          !this.state.room.roundOver &&\n          this.state.room.questionBank.length === this.state.room.totalRounds &&\n          this.state.room.participants.length >= config.min_players &&\n          !this.state.waiting &&\n          this.state.participant.currentAnswer.answerText === \"dummy\" && (\n            <Question\n              key={\"Question\" + this.props.userCode + this.props.roomCode}\n              userCode={this.props.userCode}\n              roomCode={this.props.roomCode}\n            />\n          )}\n        {this.state.room.code !== \"dummy\" &&\n          this.state.room.participants.length >= config.min_players &&\n          this.state.room.roundOver &&\n          !this.state.waiting && <FinalResult roomCode={this.props.roomCode} />}\n        {\n          <Controls\n            startGame={this.startGame}\n            leaveRoom={this.props.leaveRoom}\n            deleteRoom={this.props.deleteRoom}\n            userCode={this.props.userCode}\n            key={\"controls\" + this.props.userCode + this.props.roomCode}\n            roomCode={this.props.roomCode}\n            newRound={this.newRound}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default MainGame;\n","import React, { Component } from \"react\";\nimport HostJoin from \"./hostJoin\";\nimport UserInterface, {\n  getUser,\n  updateUser,\n} from \"../interfaces/UserInterface\";\nimport RoomInterface, {\n  getRoom,\n  updateRoom,\n} from \"../interfaces/RoomInterface\";\nimport LoadingText from \"../utilities/loadingText\";\nimport MainGame from \"./mainGame\";\nimport ParticipantInterface, {\n  dummyParticipant,\n} from \"../interfaces/participantInterface\";\nimport fire from \"../../firebase\";\n\ninterface mainGameInterface {\n  userCode: string;\n}\n\nclass PreGame extends Component<mainGameInterface> {\n  state = {\n    roomJoined: false,\n    roomCode: \"dummy\",\n    loaded: false,\n  };\n  mounted = false;\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    getUser(this.props.userCode).then((snapshot) => {\n      if (!this.mounted) return;\n      let user: UserInterface = snapshot.val();\n      if (user) {\n        if (user.roomCode !== \"none\") {\n          getRoom(user.roomCode).then((snapshot) => {\n            if (!this.mounted) return;\n            let room = snapshot.val();\n            if (room) {\n              if (\n                room.participants.some(\n                  (participant: ParticipantInterface) =>\n                    participant.uid === this.props.userCode\n                ) ||\n                room.waiting.some(\n                  (participant: ParticipantInterface) =>\n                    participant.uid === this.props.userCode\n                )\n              ) {\n                this.setState({\n                  roomCode: user.roomCode,\n                  roomJoined: true,\n                  loaded: true,\n                });\n                return;\n              }\n            }\n            user.roomCode = \"none\";\n            updateUser(user).then(() => {\n              this.setState({ loaded: true });\n            });\n          });\n        } else {\n          this.setState({ loaded: true });\n        }\n      }\n    });\n  }\n\n  onRoomCreate = (roomCode: string) => {\n    if (!this.mounted) return;\n    this.setState({\n      roomJoined: true,\n      roomCode: roomCode,\n    });\n    getUser(this.props.userCode).then((snapshot) => {\n      let user: UserInterface = snapshot.val();\n      if (user) {\n        user.roomCode = roomCode;\n        updateUser(user);\n      }\n    });\n  };\n  onRoomJoined = (roomCode: string) => {\n    getRoom(roomCode).then((snapshot) => {\n      if (snapshot.val()) {\n        let room: RoomInterface = snapshot.val();\n        if (\n          !room.participants.some(\n            (participant) => participant.uid === this.props.userCode\n          )\n        ) {\n          if (room.currentRound > 0 && !room.waitingForPlayers)\n            if (room.hasOwnProperty(\"waiting\")) {\n              if (\n                !room.waiting.some(\n                  (participant) => participant.uid === this.props.userCode\n                )\n              )\n                room.waiting.push(dummyParticipant(this.props.userCode));\n            } else room.waiting = [dummyParticipant(this.props.userCode)];\n          else {\n            room.participants.push(dummyParticipant(this.props.userCode));\n          }\n\n          updateRoom(room).then(() => {\n            this.setState({\n              roomJoined: true,\n              roomCode: roomCode,\n            });\n          });\n        } else {\n          this.setState({ roomJoined: true, roomCode });\n        }\n      }\n    });\n    getUser(this.props.userCode).then((snapshot) => {\n      let user: UserInterface = snapshot.val();\n      if (user) {\n        user.roomCode = roomCode;\n        updateUser(user);\n      }\n    });\n  };\n\n  leaveRoom = () => {\n    let roomCode = this.state.roomCode;\n    this.setState({\n      roomJoined: false,\n      roomCode: \"dummy\",\n    });\n    getRoom(roomCode).then((snapshot) => {\n      if (snapshot.val()) {\n        let room: RoomInterface = snapshot.val();\n        if (\n          room.participants.some(\n            (participant) => participant.uid === this.props.userCode\n          )\n        ) {\n          room.participants = room.participants.filter(\n            (e) => e.uid !== this.props.userCode\n          );\n          updateRoom(room);\n        }\n        if (\n          room.hasOwnProperty(\"waiting\") &&\n          room.waiting.some(\n            (participant) => participant.uid === this.props.userCode\n          )\n        ) {\n          room.waiting = room.waiting.filter(\n            (e) => e.uid !== this.props.userCode\n          );\n          updateRoom(room);\n        }\n      }\n      getUser(this.props.userCode).then((s) => {\n        let x = s.val();\n        x.roomCode = \"none\";\n        updateUser(x).then(() => {\n          if (!this.mounted) return;\n        });\n      });\n    });\n  };\n  deleteRoom = () => {\n    fire\n      .database()\n      .ref(\"/rooms/\" + this.state.roomCode)\n      .remove();\n    this.setState({\n      roomJoined: false,\n      roomCode: \"dummy\",\n    });\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        {!this.state.roomJoined && this.state.loaded && (\n          <HostJoin\n            userCode={this.props.userCode}\n            key={\"menu\" + this.props.userCode + this.state.roomCode}\n            onRoomCreate={this.onRoomCreate}\n            onRoomJoined={this.onRoomJoined}\n          />\n        )}\n        {this.state.roomJoined && this.state.loaded && (\n          <MainGame\n            userCode={this.props.userCode}\n            key={\"lounge\" + this.props.userCode + this.state.roomCode}\n            roomCode={this.state.roomCode}\n            leaveRoom={this.leaveRoom}\n            deleteRoom={this.deleteRoom}\n          />\n        )}\n        {!this.state.loaded && <LoadingText>authenticated</LoadingText>}\n      </div>\n    );\n  }\n}\n\nexport default PreGame;\n","import React, { Component } from \"react\";\nimport fire from \"../../firebase\";\nimport config from \"../../config\";\nimport { dummyUser } from \"../interfaces/UserInterface\";\n\ninterface navbarInterface {\n  onSignOut: any;\n  registerToLogin: any;\n  loginToRegister: any;\n  visibilities: any;\n  userCode: string;\n  toggleQuestionForm: any;\n}\n\nclass Navbar extends Component<navbarInterface> {\n  state = {\n    loaded: false,\n    user: dummyUser(),\n  };\n  mounted = false;\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    fire.auth().onAuthStateChanged((user) => {\n      if (!this.mounted) return;\n      if (user) {\n        fire\n          .database()\n          .ref(\"/users/\" + this.props.userCode)\n          .on(\"value\", (snapshot) => {\n            if (!this.mounted) return;\n            if (snapshot.val()) {\n              this.setState({ user: snapshot.val() });\n            }\n            this.setState({ loaded: true });\n          });\n      } else {\n        this.setState({ loaded: true });\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"mb-5\">\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n          <h2 className=\"navbar-brand\">{config.appName}</h2>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\" />\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <div className=\"mr-auto\" />\n            <div className=\"navbar-nav\">\n              {this.props.userCode !== \"dummy\" && this.state.loaded && (\n                <div className=\"nav-item dropdown\">\n                  <div\n                    className=\"nav-link dropdown-toggle text-white\"\n                    id=\"navbarDropdown\"\n                    role=\"button\"\n                    data-toggle=\"dropdown\"\n                    aria-haspopup=\"true\"\n                    aria-expanded=\"false\"\n                  >\n                    {this.state.user.firstName} {this.state.user.lastName}\n                  </div>\n                  <div\n                    className=\"dropdown-menu dropdown-menu-right\"\n                    aria-labelledby=\"navbarDropdown\"\n                  >\n                    {this.state.user.uid === \"Bz8fuRhVXKXH5HRf9hPnGuL9pwd2\" && (\n                      <button\n                        className=\"btn btn-link text-black dropdown-item\"\n                        onClick={this.props.toggleQuestionForm}\n                      >\n                        Add Question\n                      </button>\n                    )}\n                    <div className=\"dropdown-divider\" />\n                    <button\n                      className=\"btn btn-link text-black dropdown-item\"\n                      onClick={this.props.onSignOut}\n                    >\n                      Sign Out\n                    </button>\n                  </div>\n                </div>\n              )}\n              {this.props.userCode === \"dummy\" &&\n                this.state.loaded &&\n                this.props.visibilities.registerCompVisibility && (\n                  <button\n                    className=\"btn btn-link nav-link nav-item active\"\n                    onClick={this.props.registerToLogin}\n                  >\n                    Sign In\n                  </button>\n                )}\n              {this.props.userCode === \"dummy\" &&\n                this.state.loaded &&\n                this.props.visibilities.loginCompVisibility && (\n                  <button\n                    className=\"btn btn-link nav-link nav-item active\"\n                    onClick={this.props.loginToRegister}\n                  >\n                    Sign Up\n                  </button>\n                )}\n              {!this.state.loaded && (\n                <span className=\"nav-item text-white\">loading...</span>\n              )}\n            </div>\n          </div>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import AnswerInterface from \"./answerInterface\";\n\ninterface QuestionInterface {\n  questionText: string;\n  slots: number;\n  answers: Array<AnswerInterface>;\n}\nexport default QuestionInterface;\nexport let dummyQuestion = (\n  questionText: string = \"dummy\",\n  slots: number = 0,\n  answers: Array<AnswerInterface> = []\n): QuestionInterface => ({ questionText, slots, answers });\n","import React, { Component } from \"react\";\nimport fire from \"../../firebase\";\nimport QuestionInterface, {\n  dummyQuestion,\n} from \"../interfaces/questionInterface\";\n\nclass AddQuestion extends Component {\n  state = {\n    questionText: \"\",\n    dollarCount: 0,\n  };\n  onQuestionChange = (e: any) => {\n    this.setState({\n      questionText: e.target.value,\n      dollarCount: e.target.value.split(\"$\").length - 1,\n    });\n  };\n  onSubmit = (e: any) => {\n    e.preventDefault();\n    let tempQuestion: QuestionInterface = dummyQuestion(\n      this.state.questionText,\n      this.state.dollarCount,\n      []\n    );\n    fire\n      .database()\n      .ref(\"totalQuestions\")\n      .once(\"value\", (s) => {\n        fire\n          .database()\n          .ref(\"/questionBank/\" + s.val())\n          .set(tempQuestion)\n          .then(() => {\n            fire\n              .database()\n              .ref(\"totalQuestions\")\n              .set(s.val() + 1);\n          });\n      });\n  };\n  render() {\n    return (\n      <form className=\"container\" noValidate={true} onSubmit={this.onSubmit}>\n        <input\n          placeholder={\"Question\"}\n          className=\"form-control\"\n          onChange={this.onQuestionChange}\n        />\n        <br />\n        <h1 className=\"m-2 font-weight-light\">\n          Number of dollars:{this.state.dollarCount}\n        </h1>\n        <button type=\"submit\" className=\"m-2 btn btn-primary\">\n          Submit\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default AddQuestion;\n","import \"./App.css\";\nimport Authentication from \"./components/authentication/authentication\";\nimport React, { Component } from \"react\";\nimport fire from \"./firebase\";\nimport PreGame from \"./components/game/preGame\";\nimport Navbar from \"./components/utilities/navbar\";\nimport LoadingText from \"./components/utilities/loadingText\";\nimport AddQuestion from \"./components/utilities/addQuestion\";\n\nclass App extends Component {\n  state = {\n    visibilities: {\n      registerCompVisibility: true,\n      loginCompVisibility: false,\n    },\n    loadingVisible: true,\n    userCode: \"dummy\",\n    questionFormVisible: false,\n  };\n\n  componentDidMount() {\n    this.hasAuthenticated();\n  }\n\n  hasAuthenticated = () => {\n    fire.auth().onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({ userCode: user.uid });\n      }\n      this.setState({ loadingVisible: false });\n    });\n  };\n  registerToLogin = () => {\n    this.setState({\n      visibilities: {\n        registerCompVisibility: false,\n        loginCompVisibility: true,\n      },\n    });\n  };\n\n  loginToRegister = () => {\n    this.setState({\n      visibilities: {\n        registerCompVisibility: true,\n        loginCompVisibility: false,\n      },\n    });\n  };\n  toggleQuestionForm = () => {\n    this.setState({ questionFormVisible: !this.state.questionFormVisible });\n  };\n\n  onSignOut = () => {\n    fire\n      .auth()\n      .signOut()\n      .then(() => {\n        this.setState({ isAuthenticated: false });\n      })\n      .catch();\n    this.setState({ userCode: \"dummy\" });\n  };\n\n  render() {\n    return (\n      <div className=\"mb-5\">\n        <Navbar\n          onSignOut={this.onSignOut}\n          registerToLogin={this.registerToLogin}\n          loginToRegister={this.loginToRegister}\n          visibilities={this.state.visibilities}\n          userCode={this.state.userCode}\n          key={\"navbar\" + this.state.userCode}\n          toggleQuestionForm={this.toggleQuestionForm}\n        />\n        <div className=\"d-flex align-items-center container text-center vh-80\">\n          {this.state.questionFormVisible &&\n            this.state.userCode !== \"dummy\" && <AddQuestion />}\n          {this.state.loadingVisible && (\n            <LoadingText>authenticating</LoadingText>\n          )}\n          {this.state.userCode === \"dummy\" && !this.state.loadingVisible && (\n            <Authentication\n              registerToLogin={this.registerToLogin}\n              loginToRegister={this.loginToRegister}\n              visibilities={this.state.visibilities}\n              hasAuthenticated={this.hasAuthenticated}\n            />\n          )}\n          {this.state.userCode !== \"dummy\" &&\n            !this.state.questionFormVisible &&\n            !this.state.loadingVisible && (\n              <PreGame\n                key={\"maingame\" + this.state.userCode}\n                userCode={this.state.userCode}\n              />\n            )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"jquery/dist/jquery.min.js\";\nimport \"bootstrap/dist/js/bootstrap.min.js\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}